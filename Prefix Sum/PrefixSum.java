import java.util.*;
class PrefixSum {
    // https://leetcode.com/problems/minimum-number-of-operations-to-move-all-balls-to-each-box/
    public int[] minOperations(String boxes) {
        char[] ch = boxes.toCharArray();
        int n = 0, m = 0, size = ch.length;
        int[] arr = new int[size + 1];
        int[] arr2 = new int[size + 1];
        for(int i = size - 1; i >= 0; i--) {
            arr[i] = arr[i + 1] + n;
            if(ch[i] == '1') n++;

            int ind = size - i - 1;
            arr2[ind + 1] = arr2[ind] + m;
            if(ch[ind] == '1') m++;
        }

        int[] toret = new int[size];
        for(int i = 0; i < size; i++) {
            toret[i] = arr[i] + arr2[i+1];
        }

        return toret;
    }


    // -------------------------------------------------------------------------------------------------------------------------------------------
    // https://leetcode.com/problems/count-vowel-strings-in-ranges/
    boolean check(char c) {
        return c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u';
    }
    public int[] vowelStrings(String[] words, int[][] queries) {
        int[] temp = new int[words.length + 1];
        int count = 0;

        for(int c = 0; c < words.length; c++) {
            String i = words[c];
            if((check(i.charAt(0)) && check(i.charAt(i.length() - 1)))) {
                temp[c + 1] = ++count;
            } else {
                temp[c + 1] = count;
            }
        }
        System.out.println(Arrays.toString(temp));
        int[] toret = new int[queries.length];
        for(int i = 0; i < queries.length; i++) {
            toret[i] = temp[queries[i][1] + 1] - temp[queries[i][0]];
        }
        return toret;
    }


    // -------------------------------------------------------------------------------------------------------------------------------------------
    // https://leetcode.com/problems/shifting-letters-ii/
    public String shiftingLetters(String s, int[][] shifts) {
        char[] ch = s.toCharArray();
        int[] shift = new int[ch.length + 1];
        for (int[] i : shifts) {
            shift[i[0]] = i[2] == 1 ? shift[i[0]] + 1 : shift[i[0]] - 1;
            shift[i[1] + 1] = i[2] == 1 ? shift[i[1] + 1] - 1 : shift[i[1] + 1] + 1;
        }

        int sum = 0;
        for (int i = 0; i < s.length(); i++) {
            sum += shift[i];
            int temp = ((ch[i] - 'a') + sum) % 26;
            if (temp < 0)
                ch[i] = (char) (26 + temp + 'a');
            else
                ch[i] = (char) (temp + 'a');
        }
        return new String(ch);
    }
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------
    // -------------------------------------------------------------------------------------------------------------------------------------------




}