class Bitwise {
    // https://leetcode.com/problems/neighboring-bitwise-xor/
    public boolean doesValidArrayExist(int[] derived) {
        int main = 0;
        for (int i = 0; i < derived.length; i++) 
                main ^= derived[i];
        return main == 0;

    }

    public boolean doesValidArrayExist2(int[] derived) {
        int main = derived[0];
        for (int i = 1; i < derived.length; i++) {
            if (derived[i] == 1) {
                main = main == 1 ? 0 : 1;
            } 
        }
        return main == 0;
    }

    //----------------------------------------------------------------------------------------------------
    // https://leetcode.com/problems/bitwise-xor-of-all-pairings/
    public int xorAllNums(int[] nums1, int[] nums2) {
        int m = nums1.length;
        int n = nums2.length;
        int c = 0;
        for (int i : nums1) {
                c ^= (n & 1) == 0 ? 0 : i;
        }

        for (int i : nums2) {
                c ^= (m & 1) == 0 ? 0 : i;
        }
        return c;
        
    }

    //----------------------------------------------------------------------------------------------------
    // https://leetcode.com/problems/minimize-xor/
    public int minimizeXor(int num1, int num2) {
        int bits = Integer.bitCount(num2);
        // int n1 = Integer.bitCount(num1);

        int result = 0;
        for (int i = 31; i >= 0 && bits > 0; i--) {
            if ((num1 & (1 << i)) != 0) {
                // result |= (1 << i);
                result += Math.pow(2, i);
                bits--;
            }
        }
        for (int i = 0; i < 32 && bits > 0; i++) {
            if ((result & (1 << i)) == 0) {
                // result |= (1 << i);
                result += Math.pow(2, i);

                bits--;
            }
        }
        return result;

        
    }

    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------
    //----------------------------------------------------------------------------------------------------

}