import java.util.Arrays;

class Sorting {
    // https://leetcode.com/problems/minimum-operations-to-make-a-uni-value-grid/
    public int minOperations(int[][] grid, int x) {
        int n = grid.length;
        int m = grid[0].length;
        int[] arr = new int[n * m];
        int k = 0;
        for (int[] i : grid) {
            for (int j : i) {
                arr[k++] = j;
            }
        }
        Arrays.sort(arr);
        for (int i = 1; i < arr.length; i++) {
            if ((arr[i] - arr[i - 1]) % x != 0)
                return -1;
        }
        int mid = arr[arr.length / 2];
        int c = 0;
        for (int i : arr) {
            c += Math.abs(mid - i) / x;
        }
        return c;

    }
    // -----------------------------------------------------------------------------------
    // https://leetcode.com/problems/check-if-grid-can-be-cut-into-sections/
    public boolean checkValidCuts(int n, int[][] rectangles) {
        Arrays.sort(rectangles, (a, b) -> a[1] - b[1]);
        int c = 0;
        int max = rectangles[0][3];
        for(int i = 1; i < rectangles.length; i++) {
            int j[] = rectangles[i];
            if(j[1] < max) {
                max = Math.max(max, j[3]);
            } else {
                c++;
                max = j[3];
            }
        }
        if(c >= 2) return true;

        Arrays.sort(rectangles, (a, b) -> a[0] - b[0]);
        c = 0;
        max = rectangles[0][2];
        for(int i = 1; i < rectangles.length; i++) {
            int j[] = rectangles[i];
            if(j[0] < max) {
                max = Math.max(max, j[2]);
            } else {
                c++;
                max = j[2];
            }
        }

        return c>=2;
        
    }
    // -----------------------------------------------------------------------------------


    // https://leetcode.com/problems/count-days-without-meetings/
    public int countDays(int days, int[][] meetings) {
        Arrays.sort(meetings, (a,b) -> a[0] - b[0]);
        int c = meetings[0][0] - 1, max = meetings[0][1];
        for(int i = 1; i < meetings.length; i++) {
            int[] j = meetings[i];
            if(j[0] > max) {
                c += j[0] - max - 1;
                max = j[1]; 
            } else {
                max = Math.max(max, j[1]);
            }
        }
        c += days - max;
        return c;
        
    }
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------
    

}